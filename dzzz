sealed class Shape(val property: Double)

data class Circle(val radius: Double) : Shape(radius)
data class Square(val sideLength: Double) : Shape(sideLength)

enum class Action {
    ADD, CALCULATE_AREA, CALCULATE_PERIMETER, QUIT
}

class InvalidPropertyException(message: String) : Exception(message)
class InvalidActionException(message: String) : Exception(message)
class InvalidShapeException(message: String) : Exception(message)

interface UserInteraction {
    fun run()
}

interface ShapeService {
    fun addSquare(property: Double)
    fun addCircle(property: Double)
    fun calculateAllPerimeters(): List<Double>
    fun calculateAllAreas(): List<Double>
}

class ShapeServiceImpl : ShapeService {
    private val shapes = mutableListOf<Shape>()

    override fun addSquare(property: Double) {
        if (property <= 0 || property.isNaN()) throw InvalidPropertyException("Неизвестное значение: $property")
        shapes.add(Square(property))
        println("квадрат добавлен: ${Square(property)}")
    }

    override fun addCircle(property: Double) {
        if (property <= 0 || property.isNaN()) throw InvalidPropertyException("Неизвестное значение: $property")
        shapes.add(Circle(property))
        println("круг добавлен: ${Circle(property)}")
    }

    override fun calculateAllPerimeters(): List<Double> {
        return shapes.map {
            when (it) {
                is Circle -> 2 * Math.PI * it.radius
                is Square -> 4 * it.sideLength
            }
        }
    }

    override fun calculateAllAreas(): List<Double> {
        return shapes.map {
            when (it) {
                is Circle -> Math.PI * it.radius * it.radius
                is Square -> it.sideLength * it.sideLength
            }
        }
    }
}

class UserInteractionImpl(private val shapeService: ShapeService) : UserInteraction {
    override fun run() {
        while (true) {
            try {
                println("Выберите опцию:\n1) Добавить фигуру\n2) Получить площади всех фигур\n3) Получить периметры всех фигур\n4) Завершить работу\"")
                val action = interpretAction(readln())
                when (action) {
                    Action.ADD -> requestShape()
                    Action.CALCULATE_AREA -> displayAreas()
                    Action.CALCULATE_PERIMETER -> displayPerimeters()
                    Action.QUIT -> break
                }
            } catch (e: InvalidPropertyException) {
                println("Неизвестное значение: ${e.message}")
            } catch (e: InvalidActionException) {
                println("Неизвестное операция: ${e.message}")
            } catch (e: InvalidShapeException) {
                println("Неизвестный тип фигуры: ${e.message}")
            }
        }
    }

    private fun interpretAction(input: String): Action {
        return when (input) {
            "1" -> Action.ADD
            "2" -> Action.CALCULATE_AREA
            "3" -> Action.CALCULATE_PERIMETER
            "4" -> Action.QUIT
            else -> throw InvalidActionException(input)
        }
    }

    private fun requestShape() {
        println("Выберите тип фигуры:\n1) Круг\n2) Квадрат")
        val shapeType = readln()
        println("Введите значение параметра (радиус для круга, длина стороны для квадрата):")
        val property = readln().toDoubleOrNull() ?: throw InvalidPropertyException("NaN")

        when (shapeType) {
            "1" -> shapeService.addCircle(property)
            "2" -> shapeService.addSquare(property)
            else -> throw InvalidShapeException(shapeType)
        }
    }

    private fun displayAreas() {
        val areas = shapeService.calculateAllAreas()
        println("площади всех фигур: $areas")
    }

    private fun displayPerimeters() {
        val perimeters = shapeService.calculateAllPerimeters()
        println("периметр всех фигурю $perimeters")
    }
}

fun main() {
    val shapeService = ShapeServiceImpl()
    val userInteraction = UserInteractionImpl(shapeService)
    userInteraction.run()
}
